name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: house-price-estimator
  VERSION: ${{ github.run_number }}.${{ github.sha }}
  DOCKER_TAG: ${{ github.run_number }}.${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest test_app.py -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests for SonarCloud
        run: |
          pytest test_app.py -v --cov=app --cov-report=xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=nguyenqkhai_Estimate-Price-House-v3
            -Dsonar.organization=nguyenqkhai

      - name: Upload SonarCloud artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonar-results-${{ github.run_number }}
          path: |
            .scannerwork/
            coverage.xml
          retention-days: 30

  build-and-push-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test] # Remove sonarcloud dependency to not block on quality gate
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          REPO_NAME="house-price-estimator"
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"

          # Kiểm tra repository có tồn tại không
          if ! aws ecr describe-repositories --repository-names $REPO_NAME --region $REGION 2>/dev/null; then
            echo "Creating ECR repository: $REPO_NAME"
            aws ecr create-repository --repository-name $REPO_NAME --region $REGION
          else
            echo "ECR repository $REPO_NAME already exists"
          fi

          # Lấy repository URI và lưu vào environment
          ECR_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --region $REGION --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "Repository URI: $ECR_URI"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_URI }}:latest
            ${{ env.ECR_URI }}:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-${{ github.run_number }}
          path: |
            Dockerfile
            task-definition.json
          retention-days: 30

  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-and-push-ecr]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Setup ECS resources
        run: |
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"
          CLUSTER_NAME="house-price-cluster"
          SERVICE_NAME="house-price-service"
          REPO_NAME="house-price-estimator"

          # Lấy Account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV

          # Lấy ECR URI
          ECR_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --region $REGION --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

          # Tạo CloudWatch Log Group
          LOG_GROUP="/ecs/house-price"
          if ! aws logs describe-log-groups --log-group-name-prefix $LOG_GROUP --region $REGION --query 'logGroups[0].logGroupName' --output text 2>/dev/null | grep -q "$LOG_GROUP"; then
            echo "Creating CloudWatch Log Group: $LOG_GROUP"
            aws logs create-log-group --log-group-name $LOG_GROUP --region $REGION
            # Set retention policy
            aws logs put-retention-policy --log-group-name $LOG_GROUP --retention-in-days 7 --region $REGION
          else
            echo "Log Group $LOG_GROUP already exists"
          fi

          # Tạo ECS Cluster
          if ! aws ecs describe-clusters --clusters $CLUSTER_NAME --region $REGION --query 'clusters[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "Creating ECS Cluster: $CLUSTER_NAME"
            aws ecs create-cluster --cluster-name $CLUSTER_NAME --region $REGION
          else
            echo "ECS Cluster $CLUSTER_NAME already exists"
          fi

          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV

      - name: Check if IAM roles exist
        run: |
          # Kiểm tra roles có tồn tại không
          if aws iam get-role --role-name ecsTaskExecutionRole >/dev/null 2>&1 && \
             aws iam get-role --role-name ecsTaskRole >/dev/null 2>&1; then
            echo "✅ IAM roles already exist"
            echo "ROLES_EXIST=true" >> $GITHUB_ENV
          else
            echo "❌ IAM roles not found. Please create them manually:"
            echo "1. ecsTaskExecutionRole with AmazonECSTaskExecutionRolePolicy"
            echo "2. ecsTaskRole (can be empty)"
            echo "ROLES_EXIST=false" >> $GITHUB_ENV
            exit 1
          fi
          # Trust policy cho ECS tasks
          cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs-tasks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF

          # Tạo ECS Task Execution Role
          if ! aws iam get-role --role-name ecsTaskExecutionRole 2>/dev/null; then
            echo "Creating ecsTaskExecutionRole..."
            aws iam create-role \
              --role-name ecsTaskExecutionRole \
              --assume-role-policy-document file://trust-policy.json

            aws iam attach-role-policy \
              --role-name ecsTaskExecutionRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          else
            echo "ecsTaskExecutionRole already exists"
          fi

          # Tạo ECS Task Role
          if ! aws iam get-role --role-name ecsTaskRole 2>/dev/null; then
            echo "Creating ecsTaskRole..."
            aws iam create-role \
              --role-name ecsTaskRole \
              --assume-role-policy-document file://trust-policy.json

            # Attach basic ECS task permissions
            aws iam attach-role-policy \
              --role-name ecsTaskRole \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          else
            echo "ecsTaskRole already exists"
            # Ensure trust policy is correct
            aws iam update-assume-role-policy \
              --role-name ecsTaskRole \
              --policy-document file://trust-policy.json
          fi

          # Cleanup
          rm -f trust-policy.json

      - name: Verify IAM roles
        run: |
          echo "Verifying IAM roles..."
          aws iam get-role --role-name ecsTaskExecutionRole --query 'Role.AssumeRolePolicyDocument'
          aws iam get-role --role-name ecsTaskRole --query 'Role.AssumeRolePolicyDocument'

          echo "Checking role policies..."
          aws iam list-attached-role-policies --role-name ecsTaskExecutionRole
          aws iam list-attached-role-policies --role-name ecsTaskRole

      - name: Update task definition
        run: |
          # Thay thế placeholders trong task definition
          sed -i "s|ECR_REPOSITORY_URI|${{ env.ECR_URI }}|g" task-definition.json
          sed -i "s|ACCOUNT_ID|${{ env.ACCOUNT_ID }}|g" task-definition.json
          sed -i "s|VERSION_PLACEHOLDER|${{ env.VERSION }}|g" task-definition.json

          # Hiển thị task definition để debug
          echo "Updated task definition:"
          cat task-definition.json

      - name: Register task definition
        run: |
          # Register task definition và lấy ARN
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Registered task definition: $TASK_DEF_ARN"

      - name: Create or update ECS service
        run: |
          REGION="${{ secrets.AWS_REGION || 'us-east-1' }}"

          # Kiểm tra service có tồn tại không
          if aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services ${{ env.SERVICE_NAME }} --region $REGION --query 'services[0].status' --output text 2>/dev/null | grep -q "ACTIVE"; then
            echo "Updating existing ECS service: ${{ env.SERVICE_NAME }}"
            aws ecs update-service \
              --cluster ${{ env.CLUSTER_NAME }} \
              --service ${{ env.SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEF_ARN }} \
              --region $REGION
          else
            echo "Creating new ECS service: ${{ env.SERVICE_NAME }}"
            # Lấy default VPC và subnets
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text --region $REGION)
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:2].SubnetId' --output text --region $REGION | tr '\t' ',')
            SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text --region $REGION)

            aws ecs create-service \
              --cluster ${{ env.CLUSTER_NAME }} \
              --service-name ${{ env.SERVICE_NAME }} \
              --task-definition ${{ env.TASK_DEF_ARN }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
              --region $REGION
          fi

      - name: Wait for service stability
        run: |
          echo "Waiting for service to become stable..."
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION || 'us-east-1' }}

  # Giữ lại EC2 deployment như backup option
  deploy-ec2-backup:
    name: Deploy to EC2 (Backup)
    runs-on: ubuntu-latest
    needs: [build-and-push-ecr]
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_ec2 == 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Configure AWS CLI trên EC2
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.AWS_REGION }}

            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

            # Dừng và xóa container hiện tại
            sudo docker stop house-price-estimator || true
            sudo docker rm house-price-estimator || true

            # Pull image mới nhất từ ECR
            sudo docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest

            # Chạy container mới
            sudo docker run -d \
              --name house-price-estimator \
              --restart unless-stopped \
              -p 80:8501 \
              -p 8501:8501 \
              -p 5000:5000 \
              -e APP_VERSION=${{ env.VERSION }} \
              ${{ secrets.ECR_REPOSITORY_URI }}:latest

            # Dọn dẹp old images
            sudo docker image prune -f
