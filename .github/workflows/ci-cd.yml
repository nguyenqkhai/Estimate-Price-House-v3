name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: house-price-estimator
  VERSION: ${{ github.run_number }}.${{ github.sha }}
  DOCKER_TAG: ${{ github.run_number }}.${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest test_app.py -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests for SonarCloud
        run: |
          pytest test_app.py -v --cov=app --cov-report=xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.projectKey=nguyenqkhai_Estimate-Price-House-v3
            -Dsonar.organization=nguyenqkhai

      - name: Upload SonarCloud artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonar-results-${{ github.run_number }}
          path: |
            .scannerwork/
            coverage.xml
          retention-days: 30

  build-and-push-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: [test] # Remove sonarcloud dependency to not block on quality gate
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.ECR_REPOSITORY_URI }}:latest
            ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-${{ github.run_number }}
          path: |
            Dockerfile
            task-definition.json
          retention-days: 30

  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build-and-push-ecr]
    if: github.ref == 'refs/heads/main' && false # Tạm thời disable cho đến khi setup ECS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Update task definition
        run: |
          # Thay thế placeholders trong task definition
          sed -i "s|ECR_REPOSITORY_URI|${{ secrets.ECR_REPOSITORY_URI }}|g" task-definition.json
          sed -i "s|ACCOUNT_ID|${{ secrets.AWS_ACCOUNT_ID }}|g" task-definition.json
          sed -i "s|VERSION_PLACEHOLDER|${{ env.VERSION }}|g" task-definition.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

  # Giữ lại EC2 deployment như backup option
  deploy-ec2-backup:
    name: Deploy to EC2 (Backup)
    runs-on: ubuntu-latest
    needs: [build-and-push-ecr]
    if: github.ref == 'refs/heads/main' && github.event.inputs.deploy_to_ec2 == 'true'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Configure AWS CLI trên EC2
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.AWS_REGION }}

            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

            # Dừng và xóa container hiện tại
            sudo docker stop house-price-estimator || true
            sudo docker rm house-price-estimator || true

            # Pull image mới nhất từ ECR
            sudo docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest

            # Chạy container mới
            sudo docker run -d \
              --name house-price-estimator \
              --restart unless-stopped \
              -p 80:8501 \
              -p 8501:8501 \
              -p 5000:5000 \
              -e APP_VERSION=${{ env.VERSION }} \
              ${{ secrets.ECR_REPOSITORY_URI }}:latest

            # Dọn dẹp old images
            sudo docker image prune -f
