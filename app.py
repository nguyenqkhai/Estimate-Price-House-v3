import streamlit as st
import pandas as pd
import joblib
import numpy as np

model = joblib.load("model_estimate_price_house_v5.pkl")
encoder = joblib.load("encoder_v5.pkl")

numeric_columns = ['Di·ªán t√≠ch', 'S·ªë t·∫ßng', 'S·ªë ph√≤ng ng·ªß', 'S·ªë nh√† v·ªá sinh']
categorical_columns = ['H∆∞·ªõng c·ª≠a ch√≠nh', 'Lo·∫°i h√¨nh nh√† ·ªü', 'T√™n ph∆∞·ªùng', 'Qu·∫≠n']

# H·∫±ng s·ªë cho t√™n ph∆∞·ªùng ƒë·ªÉ tr√°nh tr√πng l·∫∑p
WARD_01 = "Ph∆∞·ªùng 01"
WARD_02 = "Ph∆∞·ªùng 02"
WARD_03 = "Ph∆∞·ªùng 03"
WARD_04 = "Ph∆∞·ªùng 04"
WARD_05 = "Ph∆∞·ªùng 05"
WARD_06 = "Ph∆∞·ªùng 06"
WARD_07 = "Ph∆∞·ªùng 07"
WARD_08 = "Ph∆∞·ªùng 08"
WARD_09 = "Ph∆∞·ªùng 09"
WARD_10 = "Ph∆∞·ªùng 10"
WARD_11 = "Ph∆∞·ªùng 11"
WARD_12 = "Ph∆∞·ªùng 12"
WARD_13 = "Ph∆∞·ªùng 13"
WARD_14 = "Ph∆∞·ªùng 14"
WARD_15 = "Ph∆∞·ªùng 15"
WARD_16 = "Ph∆∞·ªùng 16"
WARD_17 = "Ph∆∞·ªùng 17"
WARD_18 = "Ph∆∞·ªùng 18"
WARD_19 = "Ph∆∞·ªùng 19"
WARD_21 = "Ph∆∞·ªùng 21"
WARD_22 = "Ph∆∞·ªùng 22"
WARD_24 = "Ph∆∞·ªùng 24"
WARD_25 = "Ph∆∞·ªùng 25"
WARD_26 = "Ph∆∞·ªùng 26"
WARD_27 = "Ph∆∞·ªùng 27"
WARD_28 = "Ph∆∞·ªùng 28"

district_to_wards = {
    "Qu·∫≠n 1": [
        "Ph∆∞·ªùng T√¢n ƒê·ªãnh", "Ph∆∞·ªùng ƒêa Kao", "Ph∆∞·ªùng B·∫øn Ngh√©",
        "Ph∆∞·ªùng B·∫øn Th√†nh", "Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh", "Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o",
        "Ph∆∞·ªùng C·∫ßu √îng L√£nh", "Ph∆∞·ªùng C√¥ Giang", "Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh",
        "Ph∆∞·ªùng C·∫ßu Kho"
    ],
    "Qu·∫≠n 2": [
        "Ph∆∞·ªùng Th·∫£o ƒêi·ªÅn", "Ph∆∞·ªùng An Ph√∫", "Ph∆∞·ªùng B√¨nh An",
        "Ph∆∞·ªùng B√¨nh Tr∆∞ng ƒê√¥ng", "Ph∆∞·ªùng B√¨nh Tr∆∞ng T√¢y", "Ph∆∞·ªùng B√¨nh Kh√°nh",
        "Ph∆∞·ªùng An Kh√°nh", "Ph∆∞·ªùng C√°t L√°i", "Ph∆∞·ªùng Th·∫°nh M·ªπ L·ª£i",
        "Ph∆∞·ªùng An L·ª£i ƒê√¥ng", "Ph∆∞·ªùng Th·ªß Thi√™m"
    ],
    "Qu·∫≠n 3": [
        WARD_08, WARD_07, WARD_14, WARD_12,
        WARD_11, WARD_13, WARD_06, WARD_09,
        WARD_10, WARD_04, WARD_05, WARD_03,
        WARD_02, WARD_01
    ],
    "Qu·∫≠n 4": [
        WARD_12, WARD_13, WARD_09, WARD_06, WARD_08,
        WARD_10, WARD_05, WARD_18, WARD_14, WARD_04,
        WARD_03, WARD_16, WARD_02, WARD_15, WARD_01
    ],
    "Qu·∫≠n 5": [
        WARD_04, WARD_09, WARD_03, WARD_12, WARD_02,
        WARD_08, WARD_15, WARD_07, WARD_01, WARD_11,
        WARD_14, WARD_05, WARD_06, WARD_10, WARD_13
    ],
    "Qu·∫≠n 6": [
        WARD_14, WARD_13, WARD_09, WARD_06, WARD_12,
        WARD_05, WARD_11, WARD_02, WARD_01, WARD_04,
        WARD_08, WARD_03, WARD_07, WARD_10
    ],
    "Qu·∫≠n 7": [
        "Ph∆∞·ªùng T√¢n Thu·∫≠n ƒê√¥ng", "Ph∆∞·ªùng T√¢n Thu·∫≠n T√¢y", "Ph∆∞·ªùng T√¢n Ki·ªÉng",
        "Ph∆∞·ªùng T√¢n H∆∞ng", "Ph∆∞·ªùng B√¨nh Thu·∫≠n", "Ph∆∞·ªùng T√¢n Quy",
        "Ph∆∞·ªùng Ph√∫ Thu·∫≠n", "Ph∆∞·ªùng T√¢n Ph√∫", "Ph∆∞·ªùng T√¢n Phong", "Ph∆∞·ªùng Ph√∫ M·ªπ"
    ],
    "Qu·∫≠n 8": [
        WARD_08, WARD_02, WARD_01, WARD_03, WARD_11,
        WARD_09, WARD_10, WARD_04, WARD_13, WARD_12,
        WARD_05, WARD_14, WARD_06, WARD_15, WARD_16,
        WARD_07
    ],
    "Qu·∫≠n 9": [
        "Ph∆∞·ªùng Long B√¨nh", "Ph∆∞·ªùng Long Th·∫°nh M·ªπ", "Ph∆∞·ªùng T√¢n Ph√∫",
        "Ph∆∞·ªùng Hi·ªáp Ph√∫", "Ph∆∞·ªùng TƒÉng Nh∆°n Ph√∫ A", "Ph∆∞·ªùng TƒÉng Nh∆°n Ph√∫ B",
        "Ph∆∞·ªùng Ph∆∞·ªõc Long B", "Ph∆∞·ªùng Ph∆∞·ªõc Long A", "Ph∆∞·ªùng Tr∆∞·ªùng Th·∫°nh",
        "Ph∆∞·ªùng Long Ph∆∞·ªõc", "Ph∆∞·ªùng Long Tr∆∞·ªùng", "Ph∆∞·ªùng Ph∆∞·ªõc B√¨nh",
        "Ph∆∞·ªùng Ph√∫ H·ªØu"
    ],
    "Qu·∫≠n 10": [
        WARD_15, WARD_13, WARD_14, WARD_12, WARD_11,
        WARD_10, WARD_09, WARD_01, WARD_08, WARD_02,
        WARD_04, WARD_07, WARD_05, WARD_06, WARD_03
    ],
    "Qu·∫≠n 11": [
        WARD_15, WARD_05, WARD_14, WARD_11, WARD_03,
        WARD_10, WARD_13, WARD_08, WARD_09, WARD_12,
        WARD_07, WARD_06, WARD_04, WARD_01, WARD_02,
        WARD_16
    ],
    "Qu·∫≠n 12": [
        "Ph∆∞·ªùng Th·∫°nh Xu√¢n", "Ph∆∞·ªùng Th·∫°nh L·ªôc", "Ph∆∞·ªùng Hi·ªáp Th√†nh",
        "Ph∆∞·ªùng Th·ªõi An", "Ph∆∞·ªùng T√¢n Ch√°nh Hi·ªáp", "Ph∆∞·ªùng An Ph√∫ ƒê√¥ng",
        "Ph∆∞·ªùng T√¢n Th·ªõi Hi·ªáp", "Ph∆∞·ªùng Trung M·ªπ T√¢y", "Ph∆∞·ªùng T√¢n H∆∞ng Thu·∫≠n",
        "Ph∆∞·ªùng ƒê√¥ng H∆∞ng Thu·∫≠n", "Ph∆∞·ªùng T√¢n Th·ªõi Nh·∫•t"
    ],
    "Qu·∫≠n B√¨nh Th·∫°nh": [
        WARD_13, WARD_11, WARD_27, WARD_26, WARD_12,
        WARD_25, WARD_05, WARD_07, WARD_24, WARD_06,
        WARD_14, WARD_15, WARD_02, WARD_01, WARD_03,
        WARD_17, WARD_21, WARD_22, WARD_19, WARD_28
    ],
    "Qu·∫≠n B√¨nh T√¢n": [
        "Ph∆∞·ªùng B√¨nh H∆∞ng H√≤a", "Ph∆∞·ªùng B√¨nh H∆∞ng H√≤a A", "Ph∆∞·ªùng B√¨nh H∆∞ng H√≤a B",
        "Ph∆∞·ªùng B√¨nh Tr·ªã ƒê√¥ng", "Ph∆∞·ªùng B√¨nh Tr·ªã ƒê√¥ng A", "Ph∆∞·ªùng B√¨nh Tr·ªã ƒê√¥ng B",
        "Ph∆∞·ªùng T√¢n T·∫°o", "Ph∆∞·ªùng T√¢n T·∫°o A", "Ph∆∞·ªùng An L·∫°c", "Ph∆∞·ªùng An L·∫°c A"
    ],
    "Qu·∫≠n G√≤ V·∫•p": [
        WARD_15, WARD_13, WARD_17, WARD_06, WARD_16,
        WARD_12, WARD_14, WARD_10, WARD_05, WARD_07,
        WARD_04, WARD_01, WARD_09, WARD_08, WARD_11,
        WARD_03
    ],
    "Qu·∫≠n Ph√∫ Nhu·∫≠n": [
        WARD_04, WARD_05, WARD_09, WARD_07, WARD_03,
        WARD_01, WARD_02, WARD_08, WARD_15, WARD_10,
        WARD_11, WARD_17, WARD_14, WARD_12, WARD_13
    ],
    "Qu·∫≠n T√¢n B√¨nh": [
        WARD_02, WARD_04, WARD_12, WARD_13, WARD_01,
        WARD_03, WARD_11, WARD_07, WARD_05, WARD_10,
        WARD_06, WARD_08, WARD_09, WARD_14, WARD_15
    ],
    "Qu·∫≠n T√¢n Ph√∫": [
        "Ph∆∞·ªùng T√¢n S∆°n Nh√¨", "Ph∆∞·ªùng T√¢y Th·∫°nh", "Ph∆∞·ªùng S∆°n K·ª≥",
        "Ph∆∞·ªùng T√¢n Qu√Ω", "Ph∆∞·ªùng T√¢n Th√†nh", "Ph∆∞·ªùng Ph√∫ Th·ªç H√≤a",
        "Ph∆∞·ªùng Ph√∫ Th·∫°nh", "Ph∆∞·ªùng Ph√∫ Trung", "Ph∆∞·ªùng H√≤a Th·∫°nh",
        "Ph∆∞·ªùng Hi·ªáp T√¢n", "Ph∆∞·ªùng T√¢n Th·ªõi H√≤a"
    ],
    "Qu·∫≠n Th·ªß ƒê·ª©c": [
        "Ph∆∞·ªùng Linh Xu√¢n", "Ph∆∞·ªùng B√¨nh Chi·ªÉu", "Ph∆∞·ªùng Linh Trung",
        "Ph∆∞·ªùng Tam B√¨nh", "Ph∆∞·ªùng Tam Ph√∫", "Ph∆∞·ªùng Hi·ªáp B√¨nh Ph∆∞·ªõc",
        "Ph∆∞·ªùng Hi·ªáp B√¨nh Ch√°nh", "Ph∆∞·ªùng Linh Chi·ªÉu", "Ph∆∞·ªùng Linh T√¢y",
        "Ph∆∞·ªùng Linh ƒê√¥ng", "Ph∆∞·ªùng B√¨nh Th·ªç", "Ph∆∞·ªùng Tr∆∞·ªùng Th·ªç"
    ],
     "Huy·ªán H√≥c M√¥n": [
        "Th·ªã tr·∫•n H√≥c M√¥n", "X√£ T√¢n Hi·ªáp", "X√£ Nh·ªã B√¨nh", "X√£ ƒê√¥ng Th·∫°nh",
        "X√£ T√¢n Th·ªõi Nh√¨", "X√£ Th·ªõi Tam Th√¥n", "X√£ Xu√¢n Th·ªõi S∆°n",
        "X√£ T√¢n Xu√¢n", "X√£ Xu√¢n Th·ªõi ƒê√¥ng", "X√£ Trung Ch√°nh",
        "X√£ Xu√¢n Th·ªõi Th∆∞·ª£ng", "X√£ B√† ƒêi·ªÉm"
    ],
    "Huy·ªán B√¨nh Ch√°nh": [
        "Th·ªã tr·∫•n T√¢n T√∫c", "X√£ Ph·∫°m VƒÉn Hai", "X√£ Vƒ©nh L·ªôc A", "X√£ Vƒ©nh L·ªôc B",
        "X√£ B√¨nh L·ª£i", "X√£ L√™ Minh Xu√¢n", "X√£ T√¢n Nh·ª±t", "X√£ T√¢n Ki√™n",
        "X√£ B√¨nh H∆∞ng", "X√£ Phong Ph√∫", "X√£ An Ph√∫ T√¢y", "X√£ H∆∞ng Long",
        "X√£ ƒêa Ph∆∞·ªõc", "X√£ T√¢n Qu√Ω T√¢y", "X√£ B√¨nh Ch√°nh", "X√£ Quy ƒê·ª©c"
    ],
    "Huy·ªán Nh√† B√®": [
        "Th·ªã tr·∫•n Nh√† B√®", "X√£ Ph∆∞·ªõc Ki·ªÉn", "X√£ Ph∆∞·ªõc L·ªôc",
        "X√£ Nh∆°n ƒê·ª©c", "X√£ Ph√∫ Xu√¢n", "X√£ Long Th·ªõi", "X√£ Hi·ªáp Ph∆∞·ªõc"
    ],
    "Huy·ªán C·∫ßn Gi·ªù": [
        "Th·ªã tr·∫•n C·∫ßn Th·∫°nh", "X√£ B√¨nh Kh√°nh", "X√£ Tam Th√¥n Hi·ªáp",
        "X√£ An Th·ªõi ƒê√¥ng", "X√£ Th·∫°nh An", "X√£ Long H√≤a", "X√£ L√Ω Nh∆°n"
    ],
    "Huy·ªán C·ªß Chi": [
        "Th·ªã tr·∫•n C·ªß Chi", "X√£ Ph√∫ M·ªπ H∆∞ng", "X√£ An Ph√∫",
        "X√£ Trung L·∫≠p Th∆∞·ª£ng", "X√£ An Nh∆°n T√¢y", "X√£ Nhu·∫≠n ƒê·ª©c",
        "X√£ Ph·∫°m VƒÉn C·ªôi", "X√£ Ph√∫ H√≤a ƒê√¥ng", "X√£ Trung L·∫≠p H·∫°",
        "X√£ Trung An", "X√£ Ph∆∞·ªõc Th·∫°nh", "X√£ Ph∆∞·ªõc Hi·ªáp",
        "X√£ T√¢n An H·ªôi", "X√£ Ph∆∞·ªõc Vƒ©nh An", "X√£ Th√°i M·ªπ",
        "X√£ T√¢n Th·∫°nh T√¢y", "X√£ H√≤a Ph√∫", "X√£ T√¢n Th·∫°nh ƒê√¥ng",
        "X√£ B√¨nh M·ªπ", "X√£ T√¢n Ph√∫ Trung", "X√£ T√¢n Th√¥ng H·ªôi"
    ]
}

def preprocess_input(data, encoder, numeric_columns, categorical_columns):
    for col in categorical_columns:
        valid_categories = encoder.categories_[categorical_columns.index(col)]
        # S·ª≠a lambda function ƒë·ªÉ tr√°nh l·ªói capture variable
        def validate_category(x, valid_cats=valid_categories):
            return x if x in valid_cats else None
        data[col] = data[col].apply(validate_category)

    if data[categorical_columns].isnull().any().any():
        raise ValueError("D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá. H√£y ki·ªÉm tra l·∫°i c√°c gi√° tr·ªã trong c√°c c·ªôt ph√¢n lo·∫°i.")

    encoded_features = pd.DataFrame(encoder.transform(data[categorical_columns]))
    encoded_features.columns = encoder.get_feature_names_out(categorical_columns)

    features = pd.concat([data[numeric_columns], encoded_features], axis=1)
    return features


st.set_page_config(page_title="D·ª± ƒëo√°n gi√° nh√†", page_icon="üè†", layout="centered")

st.title("D·ª± ƒëo√°n gi√° nh√† üè°")
st.markdown("""
    H√£y nh·∫≠p th√¥ng tin chi ti·∫øt v·ªÅ cƒÉn nh√† c·ªßa b·∫°n ƒë·ªÉ d·ª± ƒëo√°n gi√° tr·ªã c·ªßa n√≥.
    M√¥ h√¨nh s·ª≠ d·ª•ng d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ ƒë∆∞a ra d·ª± ƒëo√°n ch√≠nh x√°c.
    """, unsafe_allow_html=True)

if "selected_district" not in st.session_state:
    st.session_state.selected_district = None
if "selected_ward" not in st.session_state:
    st.session_state.selected_ward = None

districts = encoder.categories_[categorical_columns.index("Qu·∫≠n")]
st.session_state.selected_district = st.selectbox(
    "Qu·∫≠n", districts, key="district", help="Ch·ªçn qu·∫≠n c·ªßa cƒÉn nh√†."
)

wards = district_to_wards.get(st.session_state.selected_district, [])
st.session_state.selected_ward = st.selectbox(
    "Ph∆∞·ªùng", wards, key="ward", help="Ch·ªçn ph∆∞·ªùng c·ªßa cƒÉn nh√†."
)

with st.form("predict_form"):
    col1, col2 = st.columns(2)
    with col1:
        area = st.number_input("Di·ªán t√≠ch (m¬≤)", min_value=0.0, step=1.0, help="Nh·∫≠p di·ªán t√≠ch c·ªßa cƒÉn nh√†.")
        floors = st.number_input("S·ªë t·∫ßng", min_value=1, step=1, help="Nh·∫≠p s·ªë t·∫ßng c·ªßa cƒÉn nh√†.")
        bedrooms = st.number_input("S·ªë ph√≤ng ng·ªß", min_value=0, step=1, help="Nh·∫≠p s·ªë ph√≤ng ng·ªß.")
    with col2:
        bathrooms = st.number_input("S·ªë nh√† v·ªá sinh", min_value=0, step=1, help="Nh·∫≠p s·ªë nh√† v·ªá sinh.")
        main_direction = st.selectbox("H∆∞·ªõng c·ª≠a ch√≠nh", encoder.categories_[0], help="Ch·ªçn h∆∞·ªõng c·ª≠a ch√≠nh.")
        house_type = st.selectbox("Lo·∫°i h√¨nh nh√† ·ªü", encoder.categories_[1], help="Ch·ªçn lo·∫°i h√¨nh nh√† ·ªü.")

    submit_button = st.form_submit_button("D·ª± ƒëo√°n gi√° nh√†")

if submit_button:
    if area <= 0 or area > 1000:
        st.error("Vui l√≤ng nh·∫≠p di·ªán t√≠ch h·ª£p l√Ω.")
    elif floors <= 0 or floors > 20:
        st.error("Vui l√≤ng nh·∫≠p s·ªë t·∫ßng h·ª£p l√Ω.")
    elif bedrooms < 1 or bedrooms > 20:
        st.error("Vui l√≤ng nh·∫≠p s·ªë ph√≤ng ng·ªß h·ª£p l√Ω.")
    elif bathrooms < 1 or bathrooms > 20:
        st.error("Vui l√≤ng nh·∫≠p s·ªë nh√† v·ªá sinh h·ª£p l√Ω.")
    elif not st.session_state.selected_district:
        st.error("Vui l√≤ng ch·ªçn qu·∫≠n.")
    elif not st.session_state.selected_ward:
        st.error("Vui l√≤ng ch·ªçn ph∆∞·ªùng.")
    else:
        new_data = pd.DataFrame({
            "Di·ªán t√≠ch": [area],
            "S·ªë t·∫ßng": [floors],
            "S·ªë ph√≤ng ng·ªß": [bedrooms],
            "S·ªë nh√† v·ªá sinh": [bathrooms],
            "H∆∞·ªõng c·ª≠a ch√≠nh": [main_direction],
            "Lo·∫°i h√¨nh nh√† ·ªü": [house_type],
            "T√™n ph∆∞·ªùng": [st.session_state.selected_ward],
            "Qu·∫≠n": [st.session_state.selected_district]
        })

        try:
            X_new = preprocess_input(new_data, encoder, numeric_columns, categorical_columns)
            predicted_price = model.predict(X_new)
            st.success(f"Gi√° nh√† d·ª± ƒëo√°n: {predicted_price[0]:,.0f} VNƒê", icon="‚úÖ")
        except ValueError as e:
            if "D·ªØ li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá" in str(e):
                st.error("Xin l·ªói, ch√∫ng t√¥i kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n gi√° nh√† ·ªü khu v·ª±c n√†y.", icon="‚ùå")
            else:
                st.error(f"L·ªói: {e}", icon="‚ùå")

st.markdown("""
    ---
    <small>·ª®ng d·ª•ng d·ª± ƒëo√°n gi√° nh√† ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi nh√≥m DYNASQUAD NG√ÄY 29/05/2025 ƒê√É ROLLBACK.</small>
    """, unsafe_allow_html=True)
